// Generated by CoffeeScript 1.4.0
/*
@author Mike Britton

@class AppConstants
@link https://github.com/PureMVC/puremvc-js-demo-todomvc.git

Define the core and notification constants.

PureMVC JS is multi-core, meaning you may have multiple,
named and isolated PureMVC cores. This app only has one.
*/

var AppConstants, AppEvents, Application, CategorieenView, CategorieenViewMediator, CategoryModel, EnummersProxy, FaceBookModel, FaceBookProxy, FaceBookTimerCommand, FaceBookView, FaceBookViewMediator, LogoView, LogoViewMediator, PrepControllerCommand, PrepModelCommand, PrepViewCommand, ResultModel, ResultView, ResultViewMediator, RoutesMediator, SearchModel, SearchView, SearchViewMediator, SoortModel, SoortenView, SoortenViewMediator, StartupCommand, StatusModel, StatusView, StatusViewMediator, TodoCommand, TodoForm, TodoFormMediator, TwitterModel, TwitterProxy, TwitterTimerCommand, TwitterView, TwitterViewMediator,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

AppConstants = (function() {

  function AppConstants() {}

  AppConstants.prototype.CORE_NAME = "TodoMVC";

  AppConstants.prototype.STARTUP = "startup";

  AppConstants.prototype.START_TWITTER_TIMER = "start_twitter_timer";

  AppConstants.prototype.START_FACEBOOK_TIMER = "start_facebook_timer";

  AppConstants.prototype.ADD_TODO = "add_todo";

  AppConstants.prototype.DELETE_TODO = "delete_todo";

  AppConstants.prototype.UPDATE_TODO = "update_todo";

  AppConstants.prototype.TOGGLE_TODO_STATUS = "toggle_todo_status";

  AppConstants.prototype.REMOVE_TODOS_COMPLETED = "remove_todos_completed";

  AppConstants.prototype.FILTER_TODOS = "filter_todos";

  AppConstants.prototype.TODOS_FILTERED = "todos_filtered";

  AppConstants.prototype.ENUMMERS_LOADED = "enummers_loaded";

  AppConstants.prototype.CATEGORIEEN_LOADED = "categorieen_loaded";

  AppConstants.prototype.SOORTEN_LOADED = "soorten_loaded";

  AppConstants.prototype.CATEGORY_CLICKED = "category_clicked";

  AppConstants.prototype.DATABASE_LOADED = "database_loaded";

  AppConstants.prototype.ENUMMER_SELECTED = "enummer_selected";

  AppConstants.prototype.SOORTFILTER_CHANGED = "soort_changed";

  AppConstants.prototype.CATEGORYFILTER_CHANGED = "category_changed";

  AppConstants.prototype.SHOW_INFO = "show_info";

  AppConstants.prototype.EFFECTEN_LOADED = "effecten_loaded";

  AppConstants.prototype.ENUMMERS_EFFECTEN_LOADED = "enummers_effecten_loaded";

  AppConstants.prototype.STATUS_CHANGED = "status_changed";

  AppConstants.prototype.FACEBOOK_COMMENTS_LOADED = "facebook_comments_loaded";

  AppConstants.prototype.TWITTER_TWEETS_LOADED = "twitter_tweets_loaded";

  AppConstants.prototype.CHANGE_MESSAGE = "change_message";

  AppConstants.prototype.ENUMMERS_FILTERED = "enummers_filtered";

  AppConstants.prototype.FILTER_ALL = "all";

  AppConstants.prototype.FILTER_ACTIVE = "active";

  AppConstants.prototype.FILTER_COMPLETED = "completed";

  return AppConstants;

})();

puremvc.DefineNamespace('enummers', function(exports) {
  return exports.AppConstants = AppConstants;
});

/*
@author Mike Britton, Cliff Hall

@class TwitterProxy
@link https://github.com/PureMVC/puremvc-js-demo-enummers.git
*/


TwitterProxy = (function(_super) {

  __extends(TwitterProxy, _super);

  function TwitterProxy() {
    this.process = __bind(this.process, this);
    return TwitterProxy.__super__.constructor.apply(this, arguments);
  }

  TwitterProxy.prototype.LOCAL_STORAGE = "twitter-puremvc";

  TwitterProxy.prototype.onRegister = function() {
    return this.loadData();
  };

  TwitterProxy.prototype.loadData = function(id) {
    var _this = this;
    return $.when(this.getComments(id)).done(function(data) {
      if ((data != null) && data.length > 0) {
        _this.sendNotification(enummers.AppConstants.prototype.TWITTER_TWEETS_LOADED, {
          tweets: data
        });
        return _this.facade.sendNotification(enummers.AppConstants.prototype.START_TWITTER_TIMER);
      }
    });
  };

  TwitterProxy.prototype.getComments = function(id) {
    var dfd,
      _this = this;
    dfd = $.Deferred();
    $.ajax("http://127.0.0.1:3000/twitter", {
      dataType: "json",
      cache: false,
      timeout: 10000,
      success: function(data) {
        console.log(data.length);
        dfd.resolve(data);
        return _this;
      },
      error: function(jqXHR, textStatus, errorThrown) {
        dfd.reject(textStatus);
        console.log(errorThrown);
        return this;
      }
    });
    return dfd.promise();
  };

  TwitterProxy.prototype.NAME = "TwitterProxy";

  TwitterProxy.prototype.process = function() {
    return console.log(data);
  };

  return TwitterProxy;

})(puremvc.Proxy);

puremvc.DefineNamespace('enummers.model.proxy', function(exports) {
  return exports.TwitterProxy = TwitterProxy;
});

/*
@author Mike Britton, Cliff Hall

@class FaceBookProxy
@link https://github.com/PureMVC/puremvc-js-demo-enummers.git
*/


FaceBookProxy = (function(_super) {

  __extends(FaceBookProxy, _super);

  function FaceBookProxy() {
    this.process = __bind(this.process, this);
    return FaceBookProxy.__super__.constructor.apply(this, arguments);
  }

  FaceBookProxy.prototype.LOCAL_STORAGE = "facebook-puremvc";

  FaceBookProxy.prototype.onRegister = function() {
    return this.loadData("http://127.0.0.1:3000/facebook");
  };

  FaceBookProxy.prototype.loadData = function(id) {
    var _this = this;
    return $.when(this.getComments(id)).done(function(data) {
      if ((data != null) && data.length > 0) {
        _this.sendNotification(enummers.AppConstants.prototype.FACEBOOK_COMMENTS_LOADED, {
          comments: data
        });
        return _this.facade.sendNotification(enummers.AppConstants.prototype.START_FACEBOOK_TIMER);
      }
    });
  };

  FaceBookProxy.prototype.getComments = function(url) {
    var dfd,
      _this = this;
    dfd = $.Deferred();
    $.ajax(url, {
      dataType: "json",
      cache: false,
      timeout: 10000,
      success: function(data) {
        console.log(data.length);
        dfd.resolve(data);
        return _this;
      },
      error: function(jqXHR, textStatus, errorThrown) {
        dfd.reject(textStatus);
        console.log(textStatus);
        return this;
      }
    });
    return dfd.promise();
  };

  FaceBookProxy.prototype.NAME = "FaceBookProxy";

  FaceBookProxy.prototype.process = function() {
    return console.log(data);
  };

  return FaceBookProxy;

})(puremvc.Proxy);

puremvc.DefineNamespace('enummers.model.proxy', function(exports) {
  return exports.FaceBookProxy = FaceBookProxy;
});

/*
@author Mike Britton, Cliff Hall

@class EnummersProxy
@link https://github.com/PureMVC/puremvc-js-demo-enummers.git
*/


EnummersProxy = (function(_super) {

  __extends(EnummersProxy, _super);

  function EnummersProxy() {
    return EnummersProxy.__super__.constructor.apply(this, arguments);
  }

  EnummersProxy.prototype.stats = {};

  EnummersProxy.prototype.viewModel = {};

  EnummersProxy.prototype.filter = enummers.AppConstants.prototype.FILTER_ALL;

  EnummersProxy.prototype.LOCAL_STORAGE = "enummers-puremvc";

  EnummersProxy.prototype.onRegister = function() {
    return this.loadData();
  };

  EnummersProxy.prototype.loadData = function() {
    var _this = this;
    return $.when(this.getCategorieen(), this.getSoorten(), this.getEnummersEffecten(), this.getEnummers(), this.getEffecten()).done(function(data) {
      return _this.sendNotification(enummers.AppConstants.prototype.DATABASE_LOADED, {
        enummers: data
      });
    });
  };

  EnummersProxy.prototype.getCategorieen = function() {
    var dfd,
      _this = this;
    dfd = $.Deferred();
    $.ajax('http://127.0.0.1:3000/categorieen', {
      dataType: "json",
      cache: false,
      timeout: 5000,
      success: function(data) {
        console.log(data.length);
        dfd.resolve(data);
        _this.sendNotification(enummers.AppConstants.prototype.CATEGORIEEN_LOADED, {
          categorieen: data
        });
        return _this;
      },
      error: function(jqXHR, textStatus, errorThrown) {
        dfd.reject(textStatus);
        console.log(errorThrown);
        return this;
      }
    });
    return dfd.promise();
  };

  EnummersProxy.prototype.succes = function(data) {};

  EnummersProxy.prototype.getSoorten = function() {
    var dfd,
      _this = this;
    dfd = $.Deferred();
    $.ajax('http://127.0.0.1:3000/soorten', {
      dataType: "json",
      cache: false,
      timeout: 5000,
      success: function(data) {
        console.log(data.length);
        dfd.resolve(data);
        _this.sendNotification(enummers.AppConstants.prototype.SOORTEN_LOADED, {
          soorten: data
        });
        return _this;
      },
      error: function(jqXHR, textStatus, errorThrown) {
        dfd.reject(textStatus);
        console.log(errorThrown);
        return this;
      }
    });
    return dfd.promise();
  };

  EnummersProxy.prototype.getEnummers = function() {
    var dfd,
      _this = this;
    dfd = $.Deferred();
    $.ajax('http://127.0.0.1:3000/enummers', {
      dataType: "json",
      cache: false,
      timeout: 5000,
      success: function(data) {
        console.log(data[0].length);
        dfd.resolve(data[0]);
        _this.sendNotification(enummers.AppConstants.prototype.ENUMMERS_LOADED, {
          enummers: data[0]
        });
        return _this;
      },
      error: function(jqXHR, textStatus, errorThrown) {
        dfd.reject(textStatus);
        console.log(errorThrown);
        return this;
      }
    });
    return dfd.promise();
  };

  EnummersProxy.prototype.getEffecten = function() {
    var dfd,
      _this = this;
    dfd = $.Deferred();
    $.ajax('http://127.0.0.1:3000/effecten', {
      dataType: "json",
      cache: false,
      timeout: 5000,
      success: function(data) {
        console.log(data.length);
        dfd.resolve(data);
        _this.sendNotification(enummers.AppConstants.prototype.EFFECTEN_LOADED, {
          effecten: data
        });
        return _this;
      },
      error: function(jqXHR, textStatus, errorThrown) {
        dfd.reject(textStatus);
        console.log(errorThrown);
        return this;
      }
    });
    return dfd.promise();
  };

  EnummersProxy.prototype.getEnummersEffecten = function() {
    var dfd,
      _this = this;
    dfd = $.Deferred();
    $.ajax('http://127.0.0.1:3000/enummerseffecten', {
      dataType: "json",
      cache: false,
      timeout: 5000,
      success: function(data) {
        console.log(data.length);
        dfd.resolve(data);
        _this.sendNotification(enummers.AppConstants.prototype.ENUMMERS_EFFECTEN_LOADED, {
          enummerseffecten: data
        });
        return _this;
      },
      error: function(jqXHR, textStatus, errorThrown) {
        dfd.reject(textStatus);
        console.log(errorThrown);
        return this;
      }
    });
    return dfd.promise();
  };

  EnummersProxy.prototype.NAME = "EnummersProxy";

  return EnummersProxy;

})(puremvc.Proxy);

puremvc.DefineNamespace('enummers.model.proxy', function(exports) {
  return exports.EnummersProxy = EnummersProxy;
});

CategoryModel = (function() {

  function CategoryModel(data) {
    this.filterCategorieen = __bind(this.filterCategorieen, this);

    this.setCategorieFilter = __bind(this.setCategorieFilter, this);

    var category, _i, _len;
    this.categorydata = [];
    this.categorieFilter = ko.observableArray([]);
    this.filterResult = ko.observable("");
    this.view;
    for (_i = 0, _len = data.length; _i < _len; _i++) {
      category = data[_i];
      this.categorydata.push(category);
    }
  }

  CategoryModel.prototype.getModelName = function() {
    return console.log("Class " + enummers.model.component.CategoryModel.prototype.NAME);
  };

  CategoryModel.prototype.setCategorieFilter = function(filter, element) {
    return this.filterCategorieen(Number($(element['currentTarget']).attr("category")), "#" + element['currentTarget']['id'], false);
  };

  CategoryModel.prototype.addEventListener = function(type, listener, useCapture) {
    return enummers.view.event.AppEvents.prototype.addEventListener(this.view, type, listener, useCapture);
  };

  CategoryModel.prototype.createEvent = function(eventName) {
    return enummers.view.event.AppEvents.prototype.createEvent(eventName);
  };

  CategoryModel.prototype.dispatchEvent = function(event) {
    return enummers.view.event.AppEvents.prototype.dispatchEvent(this.view, event);
  };

  CategoryModel.prototype.dispatchModelUpdatedEvent = function(item) {
    var modelUpdatedEvent;
    modelUpdatedEvent = this.createEvent(enummers.view.event.AppEvents.prototype.MODEL_UPDATED);
    modelUpdatedEvent.item = item;
    return this.dispatchEvent(modelUpdatedEvent);
  };

  CategoryModel.prototype.filterCategorieen = function(id, naam, byHash) {
    var el, hash, modelUpdatedEvent;
    hash = "";
    if (typeof id !== "undefined" && typeof naam !== "undefined") {
      if (this.categorieFilter.indexOf(id) === -1) {
        this.categorieFilter.push(id);
      } else {
        if (byHash === false) {
          this.categorieFilter.remove(id);
        }
      }
      el = $(naam);
      if (el.html() !== null) {
        if (el.attr('class').split("checked").length > 1) {
          if (byHash === false) {
            el.removeClass('checked');
          }
        } else {
          $(el).addClass('checked');
        }
      }
    }
    modelUpdatedEvent = this.createEvent(enummers.view.event.AppEvents.prototype.MODEL_UPDATED);
    modelUpdatedEvent.model = this.NAME;
    modelUpdatedEvent.item = this.categorieFilter();
    return this.dispatchEvent(modelUpdatedEvent);
  };

  CategoryModel.prototype.NAME = "CategoryModel";

  return CategoryModel;

})();

puremvc.DefineNamespace('enummers.model.component', function(exports) {
  return exports.CategoryModel = CategoryModel;
});

SoortModel = (function() {

  function SoortModel(data) {
    this.filterSoorten = __bind(this.filterSoorten, this);

    this.setSoortFilter = __bind(this.setSoortFilter, this);

    var soort, _i, _len;
    this.soortdata = [];
    this.soortFilter = ko.observableArray([]);
    this.filterResult = ko.observable("");
    this.view;
    for (_i = 0, _len = data.length; _i < _len; _i++) {
      soort = data[_i];
      this.soortdata.push(soort);
    }
  }

  SoortModel.prototype.getModelName = function() {
    return console.log("Class " + enummers.model.component.SoortModel.prototype.NAME);
  };

  SoortModel.prototype.setSoortFilter = function(filter, element) {
    return this.filterSoorten(filter.id, "#" + element['currentTarget']['id'], false);
  };

  SoortModel.prototype.addEventListener = function(type, listener, useCapture) {
    return enummers.view.event.AppEvents.prototype.addEventListener(this.view, type, listener, useCapture);
  };

  SoortModel.prototype.createEvent = function(eventName) {
    return enummers.view.event.AppEvents.prototype.createEvent(eventName);
  };

  SoortModel.prototype.dispatchEvent = function(event) {
    return enummers.view.event.AppEvents.prototype.dispatchEvent(this.view, event);
  };

  SoortModel.prototype.dispatchModelUpdatedEvent = function(item) {
    var modelUpdatedEvent;
    modelUpdatedEvent = this.createEvent(enummers.view.event.AppEvents.prototype.MODEL_UPDATED);
    modelUpdatedEvent.item = item;
    return this.dispatchEvent(modelUpdatedEvent);
  };

  SoortModel.prototype.filterSoorten = function(id, naam, byHash) {
    var el, hash, modelUpdatedEvent;
    hash = "";
    if (typeof id !== "undefined" && typeof naam !== "undefined") {
      if (this.soortFilter.indexOf(id) === -1) {
        this.soortFilter.push(id);
      } else {
        if (byHash === false) {
          this.soortFilter.remove(id);
        }
      }
      el = $(naam);
      if (el.html() !== null) {
        if (el.attr('class').split("checked").length > 1) {
          if (byHash === false) {
            el.removeClass('checked');
          }
        } else {
          $(el).addClass('checked');
        }
      }
    }
    modelUpdatedEvent = this.createEvent(enummers.view.event.AppEvents.prototype.MODEL_UPDATED);
    modelUpdatedEvent.model = this.NAME;
    modelUpdatedEvent.item = this.soortFilter();
    return this.dispatchEvent(modelUpdatedEvent);
  };

  SoortModel.prototype.NAME = "SoortModel";

  return SoortModel;

})();

puremvc.DefineNamespace('enummers.model.component', function(exports) {
  return exports.SoortModel = SoortModel;
});

ResultModel = (function() {

  function ResultModel(data) {
    this.filterBySearch = __bind(this.filterBySearch, this);

    this.filterByCategorie = __bind(this.filterByCategorie, this);

    this.filterBySoort = __bind(this.filterBySoort, this);

    this.findEffect = __bind(this.findEffect, this);

    this.dispatchModelUpdatedEvent = __bind(this.dispatchModelUpdatedEvent, this);

    this.dispatchEvent = __bind(this.dispatchEvent, this);

    this.setSelectedItem = __bind(this.setSelectedItem, this);

    this.getCSS = __bind(this.getCSS, this);

    var _this = this;
    this.resultdata = [];
    this.view;
    this.enummers = ko.observableArray([]);
    this.effecten = ko.observableArray([]);
    this.enummerseffecten = ko.observableArray([]);
    this.soortFilter = ko.observableArray([]);
    this.categorieFilter = ko.observableArray([]);
    this.searchFilter = ko.observable("").extend({
      logChange: "searchFilter"
    });
    this.selectedItem = ko.observable("").extend({
      logChange: "selectedItem"
    });
    this.filteredEnummers = ko.computed(function() {
      if (_this.searchFilter() === "") {
        if (_this.soortFilter().length === 0 && _this.categorieFilter().length === 0) {
          return _this.enummers();
        } else if (_this.soortFilter().length !== 0 && _this.categorieFilter().length === 0) {
          return ko.utils.arrayFilter(_this.enummers(), function(item) {
            return _this.soortFilter.indexOf(item.soortId) !== -1;
          });
        } else if (_this.soortFilter().length === 0 && _this.categorieFilter().length !== 0) {
          return ko.utils.arrayFilter(_this.enummers(), function(item) {
            return _this.categorieFilter.indexOf(item.categorieId) !== -1;
          });
        } else {
          return ko.utils.arrayFilter(_this.enummers(), function(item) {
            return _this.soortFilter.indexOf(item.soortId) !== -1 && _this.categorieFilter.indexOf(item.categorieId) !== -1;
          });
        }
      } else {
        return ko.utils.arrayFilter(_this.enummers(), function(item) {
          var betekenis, naam, _ref, _ref1;
          naam = (_ref = item.naam) != null ? _ref : "";
          betekenis = (_ref1 = item.betekenis) != null ? _ref1 : "";
          if (_this.soortFilter().length === 0 && _this.categorieFilter().length === 0) {
            return ko.utils.stringContains(item.naam.toLowerCase(), _this.searchFilter()) || ko.utils.stringContains(betekenis.toLowerCase(), _this.searchFilter());
          } else if (_this.soortFilter().length !== 0 && _this.categorieFilter().length === 0) {
            return (ko.utils.stringContains(item.naam.toLowerCase(), _this.searchFilter()) || ko.utils.stringContains(betekenis.toLowerCase(), _this.searchFilter())) && _this.soortFilter.indexOf(item.soortId) !== -1;
          } else if (_this.soortFilter().length === 0 && _this.categorieFilter().length !== 0) {
            return (ko.utils.stringContains(naam.toLowerCase(), _this.searchFilter()) || ko.utils.stringContains(betekenis.toLowerCase(), _this.searchFilter())) && _this.categorieFilter.indexOf(item.categorieId) !== -1;
          } else {
            return (ko.utils.stringContains(naam.toLowerCase(), _this.searchFilter()) || ko.utils.stringContains(betekenis.toLowerCase(), _this.searchFilter())) && _this.soortFilter.indexOf(item.soortId) !== -1 && _this.categorieFilter.indexOf(item.categorieId) !== -1;
          }
        });
      }
    });
    this.hasItems = ko.observable(false);
    this.filteredEnummers.subscribe(function(value) {
      var _ref;
      return _this.hasItems((_ref = value && value.length) != null ? _ref : false);
    });
  }

  ResultModel.prototype.getCSS = function(data) {
    var css;
    css = {};
    if (data.id === 1) {
      console.log("" + data.id + " " + (this.selectedItem().id));
    }
    if (data === this.selectedItem()) {
      switch (data.soortId) {
        case 1:
          css = {
            "red black": true
          };
          break;
        case 2:
          css = {
            "orange black": true
          };
          break;
        case 3:
          css = {
            "green black": true
          };
      }
    }
    if (data !== this.selectedItem()) {
      switch (data.soortId) {
        case 1:
          css = {
            "red": true
          };
          break;
        case 2:
          css = {
            "orange": true
          };
          break;
        case 3:
          css = {
            "green": true
          };
      }
    }
    console.log(css);
    return css;
  };

  ResultModel.prototype.getModelName = function() {
    return console.log("Class " + enummers.model.component.ResultModel.prototype.NAME);
  };

  ResultModel.prototype.setSelectedItem = function(params) {
    this.selectedItem(params);
    return this.dispatchModelUpdatedEvent(params);
  };

  ResultModel.prototype.addEventListener = function(type, listener, useCapture) {
    return enummers.view.event.AppEvents.prototype.addEventListener(this.view, type, listener, useCapture);
  };

  ResultModel.prototype.createEvent = function(eventName) {
    return enummers.view.event.AppEvents.prototype.createEvent(eventName);
  };

  ResultModel.prototype.dispatchEvent = function(event) {
    return enummers.view.event.AppEvents.prototype.dispatchEvent(this.view, event);
  };

  ResultModel.prototype.dispatchModelUpdatedEvent = function(item) {
    var modelUpdatedEvent;
    modelUpdatedEvent = this.createEvent(enummers.view.event.AppEvents.prototype.MODEL_UPDATED);
    modelUpdatedEvent.model = this.NAME;
    modelUpdatedEvent.item = item;
    return this.dispatchEvent(modelUpdatedEvent);
  };

  ResultModel.prototype.findEffect = function(ids, id) {
    if (ids.split(id).length > 1) {
      return true;
    } else {
      return false;
    }
  };

  ResultModel.prototype.filterBySoort = function(data) {
    var hash, i, soort, _fn, _i, _len,
      _this = this;
    this.soortFilter(data);
    hash = "";
    _fn = function(soort) {
      hash += '!';
      hash += soort;
      if (i === data.length - 1) {
        return hash += '!';
      }
    };
    for (i = _i = 0, _len = data.length; _i < _len; i = ++_i) {
      soort = data[i];
      _fn(soort);
    }
    console.log("" + this.NAME + " :: Soort hash: " + hash);
    return console.log("" + this.NAME + " :: Soort array: " + (this.soortFilter().length));
  };

  ResultModel.prototype.filterByCategorie = function(data) {
    var categorie, hash, i, _fn, _i, _len,
      _this = this;
    this.categorieFilter(data);
    hash = "";
    _fn = function(categorie) {
      hash += '!';
      hash += categorie;
      if (i === data.length - 1) {
        return hash += '!';
      }
    };
    for (i = _i = 0, _len = data.length; _i < _len; i = ++_i) {
      categorie = data[i];
      _fn(categorie);
    }
    console.log("" + this.NAME + " :: Categorie hash: " + hash);
    return console.log("" + this.NAME + " :: Categorie array: " + (this.categorieFilter().length));
  };

  ResultModel.prototype.filterBySearch = function(data) {
    var hash;
    this.searchFilter(data);
    hash = "!" + data + "!";
    return console.log("" + this.NAME + " :: Search hash: " + hash);
  };

  ResultModel.prototype.NAME = "ResultModel";

  return ResultModel;

})();

puremvc.DefineNamespace('enummers.model.component', function(exports) {
  return exports.ResultModel = ResultModel;
});

SearchModel = (function() {

  function SearchModel(data) {
    this.onSearchChange = __bind(this.onSearchChange, this);
    this.searchFilter = ko.observable("");
    this.filterResult = ko.observable("");
    this.enummers = ko.observable(data);
    this.view;
  }

  SearchModel.prototype.getModelName = function() {
    return console.log("Class " + enummers.model.component.SearchModel.prototype.NAME);
  };

  SearchModel.prototype.addEventListener = function(type, listener, useCapture) {
    return enummers.view.event.AppEvents.prototype.addEventListener(this.view, type, listener, useCapture);
  };

  SearchModel.prototype.createEvent = function(eventName) {
    return enummers.view.event.AppEvents.prototype.createEvent(eventName);
  };

  SearchModel.prototype.dispatchEvent = function(event) {
    return enummers.view.event.AppEvents.prototype.dispatchEvent(this.view, event);
  };

  SearchModel.prototype.dispatchModelUpdatedEvent = function(item) {
    var modelUpdatedEvent;
    modelUpdatedEvent = this.createEvent(enummers.view.event.AppEvents.prototype.MODEL_UPDATED);
    modelUpdatedEvent.item = item;
    return this.dispatchEvent(modelUpdatedEvent);
  };

  SearchModel.prototype.onSearchChange = function() {
    var modelUpdatedEvent;
    modelUpdatedEvent = this.createEvent(enummers.view.event.AppEvents.prototype.MODEL_UPDATED);
    modelUpdatedEvent.model = this.NAME;
    modelUpdatedEvent.item = this.searchFilter();
    return this.dispatchEvent(modelUpdatedEvent);
  };

  SearchModel.prototype.NAME = "SearchModel";

  return SearchModel;

})();

puremvc.DefineNamespace('enummers.model.component', function(exports) {
  return exports.SearchModel = SearchModel;
});

StatusModel = (function() {

  function StatusModel(data) {
    this.setStatus = __bind(this.setStatus, this);
    this.status = ko.observable();
    this.view;
  }

  StatusModel.prototype.getModelName = function() {
    return console.log("Class " + enummers.model.component.StatusModel.prototype.NAME);
  };

  StatusModel.prototype.setStatus = function(enummer) {
    this.status(enummer);
    return this.dispatchModelUpdatedEvent;
  };

  StatusModel.prototype.addEventListener = function(type, listener, useCapture) {
    return enummers.view.event.AppEvents.prototype.addEventListener(this.view, type, listener, useCapture);
  };

  StatusModel.prototype.createEvent = function(eventName) {
    return enummers.view.event.AppEvents.prototype.createEvent(eventName);
  };

  StatusModel.prototype.dispatchEvent = function(event) {
    return enummers.view.event.AppEvents.prototype.dispatchEvent(this.view, event);
  };

  StatusModel.prototype.dispatchModelUpdatedEvent = function() {
    var modelUpdatedEvent;
    modelUpdatedEvent = this.createEvent(enummers.view.event.AppEvents.prototype.MODEL_UPDATED);
    modelUpdatedEvent.model = this.NAME;
    modelUpdatedEvent.item = this.status();
    return this.dispatchEvent(modelUpdatedEvent);
  };

  StatusModel.prototype.NAME = "StatusModel";

  return StatusModel;

})();

puremvc.DefineNamespace('enummers.model.component', function(exports) {
  return exports.StatusModel = StatusModel;
});

FaceBookModel = (function() {

  function FaceBookModel(data) {
    this.changeMessage = __bind(this.changeMessage, this);

    this.setComments = __bind(this.setComments, this);
    this.comments = ko.observableArray(data);
    this.currentMessage = ko.observable();
    this.view;
  }

  FaceBookModel.prototype.getModelName = function() {
    return console.log("Class " + enummers.model.component.FaceBookModel.prototype.NAME);
  };

  FaceBookModel.prototype.setComments = function(data) {
    return this.comments(data);
  };

  FaceBookModel.prototype.changeMessage = function() {
    var number;
    number = Math.floor(Math.random() * this.comments().length);
    return this.currentMessage(this.comments()[number]);
  };

  FaceBookModel.prototype.addEventListener = function(type, listener, useCapture) {
    return enummers.view.event.AppEvents.prototype.addEventListener(this.view, type, listener, useCapture);
  };

  FaceBookModel.prototype.createEvent = function(eventName) {
    return enummers.view.event.AppEvents.prototype.createEvent(eventName);
  };

  FaceBookModel.prototype.dispatchEvent = function(event) {
    return enummers.view.event.AppEvents.prototype.dispatchEvent(this.view, event);
  };

  FaceBookModel.prototype.dispatchModelUpdatedEvent = function(item) {
    var modelUpdatedEvent;
    modelUpdatedEvent = this.createEvent(enummers.view.event.AppEvents.prototype.MODEL_UPDATED);
    modelUpdatedEvent.model = this.NAME;
    modelUpdatedEvent.item = this.comments();
    return this.dispatchEvent(modelUpdatedEvent);
  };

  FaceBookModel.prototype.NAME = "FaceBookModel";

  return FaceBookModel;

})();

puremvc.DefineNamespace('enummers.model.component', function(exports) {
  return exports.FaceBookModel = FaceBookModel;
});

TwitterModel = (function() {

  function TwitterModel(data) {
    this.changeMessage = __bind(this.changeMessage, this);

    this.setTweets = __bind(this.setTweets, this);
    this.tweets = ko.observableArray(data);
    this.currentMessage = ko.observable();
    this.view;
  }

  TwitterModel.prototype.getModelName = function() {
    return console.log("Class " + enummers.model.component.TwitterModel.prototype.NAME);
  };

  TwitterModel.prototype.setTweets = function(data) {
    return this.tweets(data);
  };

  TwitterModel.prototype.changeMessage = function() {
    var number;
    number = Math.floor(Math.random() * this.tweets().length);
    return this.currentMessage(this.tweets()[number]);
  };

  TwitterModel.prototype.addEventListener = function(type, listener, useCapture) {
    return enummers.view.event.AppEvents.prototype.addEventListener(this.view, type, listener, useCapture);
  };

  TwitterModel.prototype.createEvent = function(eventName) {
    return enummers.view.event.AppEvents.prototype.createEvent(eventName);
  };

  TwitterModel.prototype.dispatchEvent = function(event) {
    return enummers.view.event.AppEvents.prototype.dispatchEvent(this.view, event);
  };

  TwitterModel.prototype.dispatchModelUpdatedEvent = function(item) {
    var modelUpdatedEvent;
    modelUpdatedEvent = this.createEvent(enummers.view.event.AppEvents.prototype.MODEL_UPDATED);
    modelUpdatedEvent.model = this.NAME;
    modelUpdatedEvent.item = this.tweets();
    return this.dispatchEvent(modelUpdatedEvent);
  };

  TwitterModel.prototype.NAME = "TwitterModel";

  return TwitterModel;

})();

puremvc.DefineNamespace('enummers.model.component', function(exports) {
  return exports.TwitterModel = TwitterModel;
});

/*
@author Cliff Hall

@class AppEvents
@link https://github.com/PureMVC/puremvc-js-demo-enummers.git
*/


AppEvents = (function() {

  function AppEvents() {}

  AppEvents.prototype.TOGGLE_COMPLETE_ALL = "toggle_complete_all";

  AppEvents.prototype.TOGGLE_COMPLETE = "toggle_complete";

  AppEvents.prototype.CLEAR_COMPLETED = "clear_completed";

  AppEvents.prototype.DELETE_ITEM = "delete_item";

  AppEvents.prototype.UPDATE_ITEM = "update_item";

  AppEvents.prototype.ADD_ITEM = "add_item";

  AppEvents.prototype.LOGO_CLICKED = "logo_clicked";

  AppEvents.prototype.ENUMMER_CLICKED = "enummer_clicked";

  AppEvents.prototype.RELOAD_PAGE = "reload_page";

  AppEvents.prototype.LOAD_ENUMMERS = "load_enummers";

  AppEvents.prototype.CATEGORIEEN_LOADED = "categorieen_loaded";

  AppEvents.prototype.SOORTEN_LOADED = "soorten_loaded";

  AppEvents.prototype.ENUMMERS_LOADED = "enummers_loaded";

  AppEvents.prototype.MODEL_UPDATED = "model_updated";

  AppEvents.prototype.SEARCH_ACTIVATED = "search_activated";

  AppEvents.prototype.createEvent = function(eventName) {
    var event;
    event = void 0;
    if (document.createEvent) {
      event = document.createEvent("Events");
      event.initEvent(eventName, false, false);
    } else {
      if (document.createEventObject) {
        event = document.createEventObject();
      }
    }
    return event;
  };

  AppEvents.prototype.addEventListener = function(object, type, listener, useCapture) {
    if (object.addEventListener) {
      return object.addEventListener(type, listener, useCapture);
    } else {
      if (object.attachEvent) {
        return object.attachEvent(type, listener);
      }
    }
  };

  AppEvents.prototype.dispatchEvent = function(object, event) {
    if (object.dispatchEvent) {
      return object.dispatchEvent(event);
    } else {
      if (object.fireEvent) {
        return object.fireEvent(event.type, event);
      }
    }
  };

  return AppEvents;

})();

puremvc.DefineNamespace('enummers.view.event', function(exports) {
  return exports.AppEvents = AppEvents;
});

/*
@author Mike Britton, Cliff Hall

@class TodoForm
@link https://github.com/PureMVC/puremvc-js-demo-todomvc.git
*/


TodoForm = (function() {

  function TodoForm(event) {
    this.todos = [];
    this.stats = {};
    this.filter = "";
    this.todoApp = document.querySelector("#todoapp");
    this.main = this.todoApp.querySelector("#main");
    this.toggleAllCheckbox = this.todoApp.querySelector("#toggle-all");
    this.newTodoField = this.todoApp.querySelector("#new-todo");
    this.todoList = this.todoApp.querySelector("#todo-list");
    this.footer = this.todoApp.querySelector("#footer");
    this.todoCount = this.todoApp.querySelector("#todo-count");
    this.clearButton = this.todoApp.querySelector("#clear-completed");
    this.filters = this.todoApp.querySelector("#filters");
    this.filterAll = this.filters.querySelector("#filterAll");
    this.filterActive = this.filters.querySelector("#filterActive");
    this.filterCompleted = this.filters.querySelector("#filterCompleted");
    this.newTodoField.component = this;
    todomvc.view.event.AppEvents.prototype.addEventListener(this.newTodoField, "keypress", function(event) {
      if (event.keyCode === todomvc.view.component.TodoForm.prototype.ENTER_KEY && this.value) {
        return this.component.dispatchAddTodo(event);
      }
    });
    this.clearButton.component = this;
    todomvc.view.event.AppEvents.prototype.addEventListener(this.clearButton, "click", function(event) {
      return this.component.dispatchClearCompleted(event);
    });
    this.toggleAllCheckbox.component = this;
    todomvc.view.event.AppEvents.prototype.addEventListener(this.toggleAllCheckbox, "change", function(event) {
      return this.component.dispatchToggleCompleteAll(event.target.checked);
    });
  }

  TodoForm.prototype.ENTER_KEY = 13;

  TodoForm.prototype.addEventListener = function(type, listener, useCapture) {
    return todomvc.view.event.AppEvents.prototype.addEventListener(this.todoApp, type, listener, useCapture);
  };

  TodoForm.prototype.createEvent = function(eventName) {
    return todomvc.view.event.AppEvents.prototype.createEvent(eventName);
  };

  TodoForm.prototype.dispatchEvent = function(event) {
    return todomvc.view.event.AppEvents.prototype.dispatchEvent(this.todoApp, event);
  };

  TodoForm.prototype.dispatchToggleComplete = function(event) {
    var todo, toggleItemCompleteEvent;
    todo = void 0;
    toggleItemCompleteEvent = void 0;
    todo = this.getTodoById(event.target.getAttribute("data-todo-id"));
    todo.id = event.target.getAttribute("data-todo-id");
    todo.completed = event.target.checked;
    toggleItemCompleteEvent = this.createEvent(todomvc.view.event.AppEvents.prototype.TOGGLE_COMPLETE);
    toggleItemCompleteEvent.todo = todo;
    return this.dispatchEvent(toggleItemCompleteEvent);
  };

  TodoForm.prototype.dispatchToggleCompleteAll = function(checked) {
    var toggleCompleteAllEvent;
    toggleCompleteAllEvent = this.createEvent(todomvc.view.event.AppEvents.prototype.TOGGLE_COMPLETE_ALL);
    toggleCompleteAllEvent.doToggleComplete = checked;
    return this.dispatchEvent(toggleCompleteAllEvent);
  };

  TodoForm.prototype.dispatchClearCompleted = function() {
    var clearCompleteEvent;
    clearCompleteEvent = this.createEvent(todomvc.view.event.AppEvents.prototype.CLEAR_COMPLETED);
    return this.dispatchEvent(clearCompleteEvent);
  };

  TodoForm.prototype.dispatchDelete = function(id) {
    var deleteItemEvent;
    deleteItemEvent = this.createEvent(todomvc.view.event.AppEvents.prototype.DELETE_ITEM);
    deleteItemEvent.todoId = id;
    return this.dispatchEvent(deleteItemEvent);
  };

  TodoForm.prototype.dispatchAddTodo = function(event) {
    var addItemEvent, todo;
    addItemEvent = void 0;
    todo = {};
    todo.completed = false;
    todo.title = this.newTodoField.value.trim();
    if (todo.title === "") {
      return;
    }
    addItemEvent = this.createEvent(todomvc.view.event.AppEvents.prototype.ADD_ITEM);
    addItemEvent.todo = todo;
    return this.dispatchEvent(addItemEvent);
  };

  TodoForm.prototype.dispatchUpdateTodo = function(event) {
    var eventType, todo, updateItemEvent;
    eventType = void 0;
    updateItemEvent = void 0;
    todo = {};
    todo.id = event.target.id.slice(6);
    todo.title = event.target.value.trim();
    todo.completed = event.target.completed;
    eventType = (todo.title === "" ? todomvc.view.event.AppEvents.prototype.DELETE_ITEM : todomvc.view.event.AppEvents.prototype.UPDATE_ITEM);
    updateItemEvent = this.createEvent(eventType);
    updateItemEvent.todo = todo;
    updateItemEvent.todoId = todo.id;
    return this.dispatchEvent(updateItemEvent);
  };

  TodoForm.prototype.setFilteredTodoList = function(data) {
    var checkbox, deleteLink, div, divDisplay, i, inputEditTodo, label, li, todo, todoId;
    todo = void 0;
    checkbox = void 0;
    label = void 0;
    deleteLink = void 0;
    divDisplay = void 0;
    inputEditTodo = void 0;
    li = void 0;
    i = void 0;
    todoId = void 0;
    div = void 0;
    inputEditTodo = void 0;
    this.todos = data.todos;
    this.stats = data.stats;
    this.filter = data.filter;
    this.main.style.display = (this.stats.totalTodo ? "block" : "none");
    this.todoList.innerHTML = "";
    this.newTodoField.value = "";
    i = 0;
    while (i < this.todos.length) {
      todo = this.todos[i];
      checkbox = document.createElement("input");
      checkbox.className = "toggle";
      checkbox.setAttribute("data-todo-id", todo.id);
      checkbox.type = "checkbox";
      checkbox.component = this;
      todomvc.view.event.AppEvents.prototype.addEventListener(checkbox, "change", function(event) {
        return this.component.dispatchToggleComplete(event);
      });
      label = document.createElement("label");
      label.setAttribute("data-todo-id", todo.id);
      label.appendChild(document.createTextNode(todo.title));
      deleteLink = document.createElement("button");
      deleteLink.className = "destroy";
      deleteLink.setAttribute("data-todo-id", todo.id);
      deleteLink.component = this;
      todomvc.view.event.AppEvents.prototype.addEventListener(deleteLink, "click", function(event) {
        return this.component.dispatchDelete(event.target.getAttribute("data-todo-id"));
      });
      divDisplay = document.createElement("div");
      divDisplay.className = "view";
      divDisplay.setAttribute("data-todo-id", todo.id);
      divDisplay.appendChild(checkbox);
      divDisplay.appendChild(label);
      divDisplay.appendChild(deleteLink);
      todomvc.view.event.AppEvents.prototype.addEventListener(divDisplay, "dblclick", function() {
        todoId = this.getAttribute("data-todo-id");
        div = document.getElementById("li_" + todoId);
        inputEditTodo = document.getElementById("input_" + todoId);
        div.className = "editing";
        return inputEditTodo.focus();
      });
      inputEditTodo = document.createElement("input");
      inputEditTodo.id = "input_" + todo.id;
      inputEditTodo.className = "edit";
      inputEditTodo.value = todo.title;
      inputEditTodo.completed = todo.completed;
      inputEditTodo.component = this;
      todomvc.view.event.AppEvents.prototype.addEventListener(inputEditTodo, "keypress", function(event) {
        if (event.keyCode === todomvc.view.component.TodoForm.prototype.ENTER_KEY) {
          return this.component.dispatchUpdateTodo(event);
        }
      });
      todomvc.view.event.AppEvents.prototype.addEventListener(inputEditTodo, "blur", function(event) {
        return this.component.dispatchUpdateTodo(event);
      });
      li = document.createElement("li");
      li.id = "li_" + todo.id;
      li.appendChild(divDisplay);
      li.appendChild(inputEditTodo);
      if (todo.completed) {
        li.className += "complete";
        checkbox.checked = true;
      }
      this.todoList.appendChild(li);
      i++;
    }
    this.footer.style.display = (this.stats.totalTodo ? "block" : "none");
    this.updateToggleAllCheckbox();
    this.updateClearButton();
    this.updateTodoCount();
    return this.updateFilter();
  };

  TodoForm.prototype.getTodoById = function(id) {
    var i;
    i = void 0;
    i = 0;
    while (i < this.todos.length) {
      if (this.todos[i].id === id) {
        return this.todos[i];
      }
      i++;
    }
  };

  TodoForm.prototype.updateFilter = function() {
    this.filterAll.className = (this.filter === todomvc.AppConstants.prototype.FILTER_ALL ? "selected" : "");
    this.filterActive.className = (this.filter === todomvc.AppConstants.prototype.FILTER_ACTIVE ? "selected" : "");
    return this.filterCompleted.className = (this.filter === todomvc.AppConstants.prototype.FILTER_COMPLETED ? "selected" : "");
  };

  TodoForm.prototype.updateToggleAllCheckbox = function() {
    var checked, i;
    i = void 0;
    checked = this.todos.length > 0;
    i = 0;
    while (i < this.todos.length) {
      if (this.todos[i].completed === false) {
        checked = false;
        break;
      }
      i++;
    }
    return this.toggleAllCheckbox.checked = checked;
  };

  TodoForm.prototype.updateClearButton = function() {
    this.clearButton.style.display = (this.stats.todoCompleted === 0 ? "none" : "block");
    return this.clearButton.innerHTML = "Clear completed (" + this.stats.todoCompleted + ")";
  };

  TodoForm.prototype.updateTodoCount = function() {
    var number, text;
    number = document.createElement("strong");
    text = " " + (this.stats.todoLeft === 1 ? "item" : "items") + " left";
    number.innerHTML = this.stats.todoLeft;
    this.todoCount.innerHTML = null;
    this.todoCount.appendChild(number);
    return this.todoCount.appendChild(document.createTextNode(text));
  };

  TodoForm.prototype.NAME = "TodoForm";

  return TodoForm;

})();

puremvc.DefineNamespace('todomvc.view.component', function(exports) {
  return exports.TodoForm = TodoForm;
});

/*
@author Mike Britton, Cliff Hall

@class TodoForm
@link https://github.com/PureMVC/puremvc-js-demo-enummers.git
*/


LogoView = (function() {

  function LogoView(event) {
    this.enummers = [];
    this.logo = $("#logo")[0];
    this.img = $("#logo").find(".img")[0];
    this.img.component = this;
    enummers.view.event.AppEvents.prototype.addEventListener(this.img, "click", function(event) {
      return this.component.dispatchLogoClicked(event);
    });
  }

  LogoView.prototype.ENTER_KEY = 13;

  LogoView.prototype.addEventListener = function(type, listener, useCapture) {
    return enummers.view.event.AppEvents.prototype.addEventListener(this.logo, type, listener, useCapture);
  };

  LogoView.prototype.createEvent = function(eventName) {
    return enummers.view.event.AppEvents.prototype.createEvent(eventName);
  };

  LogoView.prototype.dispatchEvent = function(event) {
    return enummers.view.event.AppEvents.prototype.dispatchEvent(this.logo, event);
  };

  LogoView.prototype.dispatchLogoClicked = function() {
    var logoClickedEvent;
    logoClickedEvent = this.createEvent(enummers.view.event.AppEvents.prototype.LOGO_CLICKED);
    return this.dispatchEvent(logoClickedEvent);
  };

  LogoView.prototype.enableLogo = function() {};

  LogoView.prototype.NAME = "LogoView";

  return LogoView;

})();

puremvc.DefineNamespace('enummers.view.component', function(exports) {
  return exports.LogoView = LogoView;
});

/*
@author Mike Britton, Cliff Hall

@class CategorieenView
@link https://github.com/PureMVC/puremvc-js-demo-enummers.git
*/


CategorieenView = (function() {

  function CategorieenView(event) {
    this.setFilterResult = __bind(this.setFilterResult, this);
    this.enummers = [];
    this.categorieen = $("#categorieen")[0];
    this.viewModel = {};
    this.categorieen.component = this;
    enummers.view.event.AppEvents.prototype.addEventListener(this.categorieen, "click", function(event) {
      return this.component.dispatchLogoClicked(event);
    });
  }

  CategorieenView.prototype.ENTER_KEY = 13;

  CategorieenView.prototype.addEventListener = function(type, listener, useCapture) {
    return enummers.view.event.AppEvents.prototype.addEventListener(this.categorieen, type, listener, useCapture);
  };

  CategorieenView.prototype.createEvent = function(eventName) {
    return enummers.view.event.AppEvents.prototype.createEvent(eventName);
  };

  CategorieenView.prototype.dispatchEvent = function(event) {
    return enummers.view.event.AppEvents.prototype.dispatchEvent(this.categorieen, event);
  };

  CategorieenView.prototype.dispatchLogoClicked = function() {
    var logoClickedEvent;
    logoClickedEvent = this.createEvent(enummers.view.event.AppEvents.prototype.CATEGORY_CLICKED);
    return this.dispatchEvent(logoClickedEvent);
  };

  CategorieenView.prototype.setCategorieen = function(data) {
    this.viewModel = new enummers.model.component.CategoryModel(data);
    this.viewModel.view = this.categorieen;
    ko.applyBindings(this.viewModel, this.categorieen);
    return jQuery('.menu-little').popover({
      trigger: 'hover',
      placement: 'top'
    });
  };

  CategorieenView.prototype.setFilterResult = function(data) {
    return this.viewModel.filterResult(data);
  };

  CategorieenView.prototype.NAME = "CategorieenView";

  return CategorieenView;

})();

puremvc.DefineNamespace('enummers.view.component', function(exports) {
  return exports.CategorieenView = CategorieenView;
});

/*
@author Mike Britton, Cliff Hall

@class SoortenView
@link https://github.com/PureMVC/puremvc-js-demo-enummers.git
*/


SoortenView = (function() {

  function SoortenView(event) {
    this.setFilterResult = __bind(this.setFilterResult, this);

    this.setSoorten = __bind(this.setSoorten, this);
    this.enummers = [];
    this.soorten = $("#soorten")[0];
    this.viewModel = {};
    this.soorten.component = this;
    enummers.view.event.AppEvents.prototype.addEventListener(this.soorten, "click", function(event) {
      return this.component.dispatchSoortClicked(event);
    });
  }

  SoortenView.prototype.ENTER_KEY = 13;

  SoortenView.prototype.addEventListener = function(type, listener, useCapture) {
    return enummers.view.event.AppEvents.prototype.addEventListener(this.soorten, type, listener, useCapture);
  };

  SoortenView.prototype.createEvent = function(eventName) {
    return enummers.view.event.AppEvents.prototype.createEvent(eventName);
  };

  SoortenView.prototype.dispatchEvent = function(event) {
    return enummers.view.event.AppEvents.prototype.dispatchEvent(this.soorten, event);
  };

  SoortenView.prototype.dispatchSoortClicked = function() {
    var logoClickedEvent;
    logoClickedEvent = this.createEvent(enummers.view.event.AppEvents.prototype.CATEGORY_CLICKED);
    return this.dispatchEvent(logoClickedEvent);
  };

  SoortenView.prototype.setSoorten = function(data) {
    this.viewModel = new enummers.model.component.SoortModel(data);
    this.viewModel.view = this.soorten;
    ko.applyBindings(this.viewModel, this.soorten);
    return $('.menu-large').popover({
      trigger: 'hover',
      placement: 'top'
    });
  };

  SoortenView.prototype.setFilterResult = function(data) {
    return this.viewModel.filterResult(data);
  };

  SoortenView.prototype.NAME = "SoortenView";

  return SoortenView;

})();

puremvc.DefineNamespace('enummers.view.component', function(exports) {
  return exports.SoortenView = SoortenView;
});

/*
@author Mike Britton, Cliff Hall

@class ResultView
@link https://github.com/PureMVC/puremvc-js-demo-enummers.git
*/


ResultView = (function() {

  function ResultView(event) {
    this.filterBySearch = __bind(this.filterBySearch, this);

    this.filterByCategorie = __bind(this.filterByCategorie, this);

    this.filterBySoort = __bind(this.filterBySoort, this);

    this.updateResult = __bind(this.updateResult, this);

    this.setEffecten = __bind(this.setEffecten, this);

    this.setEnummersEffecten = __bind(this.setEnummersEffecten, this);

    this.setResult = __bind(this.setResult, this);

    this.dispatchEnummerClicked = __bind(this.dispatchEnummerClicked, this);
    this.enummersdata = [];
    this.timeout = 100;
    this.result = $("#result")[0];
    this.grid = $("#result").find("#grid");
    this.viewModel = new enummers.model.component.ResultModel([]);
    this.result.component = this;
    enummers.view.event.AppEvents.prototype.addEventListener(this.result, "click", function(event) {
      return this.component.dispatchEnummerClicked(event);
    });
  }

  ResultView.prototype.ENTER_KEY = 13;

  ResultView.prototype.addEventListener = function(type, listener, useCapture) {
    return enummers.view.event.AppEvents.prototype.addEventListener(this.result, type, listener, useCapture);
  };

  ResultView.prototype.createEvent = function(eventName) {
    return enummers.view.event.AppEvents.prototype.createEvent(eventName);
  };

  ResultView.prototype.dispatchEvent = function(event) {
    return enummers.view.event.AppEvents.prototype.dispatchEvent(this.result, event);
  };

  ResultView.prototype.dispatchEnummerClicked = function() {
    var enummerClickedEvent;
    enummerClickedEvent = this.createEvent(enummers.view.event.AppEvents.prototype.ENUMMER_CLICKED);
    enummerClickedEvent.item = this.viewModel.selectedItem();
    enummerClickedEvent.model = enummers.model.component.ResultModel.prototype.NAME;
    return this.dispatchEvent(enummerClickedEvent);
  };

  ResultView.prototype.setResult = function(data) {
    var _this = this;
    this.viewModel.view = this.result;
    this.viewModel.enummers(data);
    ko.applyBindings(this.viewModel, this.result);
    return setTimeout((function() {
      /*
            @grid.isotope(
              itemSelector: '.enummer',
              layoutMode : 'fitRows',
              animationOptions:
                duration: 750,
                easing: 'linear',
                queue: true
            )
      */
      $.when(_this.grid.masonry({
        itemSelector: 'div.enummer',
        columnWidth: 5,
        isAnimated: !Modernizr.csstransitions
      })).then(function() {
        return console.log("FINISH");
      });
      return $('.effect').popover({
        trigger: 'hover',
        placement: 'top'
      });
    }), this.timeout);
  };

  ResultView.prototype.setEnummersEffecten = function(data) {
    return this.viewModel.enummerseffecten(data);
  };

  ResultView.prototype.setEffecten = function(data) {
    return this.viewModel.effecten(data);
  };

  ResultView.prototype.updateResult = function() {
    var _this = this;
    return setTimeout((function() {
      return $.when(_this.grid.masonry('reload')).then(function() {
        return console.log("FINISH");
      });
    }), this.timeout);
  };

  ResultView.prototype.filterBySoort = function(data) {
    var _this = this;
    this.viewModel.filterBySoort(data);
    return setTimeout((function() {
      return _this.updateResult();
    }), this.timeout);
  };

  ResultView.prototype.filterByCategorie = function(data) {
    var _this = this;
    this.viewModel.filterByCategorie(data);
    return setTimeout((function() {
      return _this.updateResult();
    }), this.timeout);
  };

  ResultView.prototype.filterBySearch = function(data) {
    var _this = this;
    this.viewModel.filterBySearch(data);
    return setTimeout((function() {
      return _this.updateResult();
    }), this.timeout);
  };

  ResultView.prototype.NAME = "ResultView";

  return ResultView;

})();

puremvc.DefineNamespace('enummers.view.component', function(exports) {
  return exports.ResultView = ResultView;
});

/*
@author Mike Britton, Cliff Hall

@class CategorieenView
@link https://github.com/PureMVC/puremvc-js-demo-enummers.git
*/


SearchView = (function() {

  function SearchView(event) {
    this.setFilterResult = __bind(this.setFilterResult, this);
    this.enummers = [];
    this.search = $("#search")[0];
    this.viewModel = {};
    this.search.component = this;
    enummers.view.event.AppEvents.prototype.addEventListener(this.search, "click", function(event) {
      return this.component.dispatchSearchActivated(event);
    });
  }

  SearchView.prototype.ENTER_KEY = 13;

  SearchView.prototype.addEventListener = function(type, listener, useCapture) {
    return enummers.view.event.AppEvents.prototype.addEventListener(this.search, type, listener, useCapture);
  };

  SearchView.prototype.createEvent = function(eventName) {
    return enummers.view.event.AppEvents.prototype.createEvent(eventName);
  };

  SearchView.prototype.dispatchEvent = function(event) {
    return enummers.view.event.AppEvents.prototype.dispatchEvent(this.search, event);
  };

  SearchView.prototype.dispatchSearchActivated = function() {
    var searchActivatedEvent;
    searchActivatedEvent = this.createEvent(enummers.view.event.AppEvents.prototype.SEARCH_ACTIVATED);
    return this.dispatchEvent(searchActivatedEvent);
  };

  SearchView.prototype.setSearch = function(data) {
    this.viewModel = new enummers.model.component.SearchModel(data);
    this.viewModel.view = this.search;
    ko.applyBindings(this.viewModel, this.search);
    return createjs.Tween.get($("#search")).to({
      x: 1000
    }, 500, createjs.Ease.linear);
  };

  SearchView.prototype.setFilterResult = function(data) {
    return this.viewModel.filterResult(data);
  };

  SearchView.prototype.NAME = "SearchView";

  return SearchView;

})();

puremvc.DefineNamespace('enummers.view.component', function(exports) {
  return exports.SearchView = SearchView;
});

/*
@author Mike Britton, Cliff Hall

@class StatusView
@link https://github.com/PureMVC/puremvc-js-demo-enummers.git
*/


StatusView = (function() {

  function StatusView(event) {
    this.setStatus = __bind(this.setStatus, this);

    this.changeStatus = __bind(this.changeStatus, this);
    this.status = $("#status")[0];
    this.viewModel = {};
    this.status.component = this;
    enummers.view.event.AppEvents.prototype.addEventListener(this.status, "click", function(event) {
      return this.component.dispatchSoortClicked(event);
    });
  }

  StatusView.prototype.ENTER_KEY = 13;

  StatusView.prototype.addEventListener = function(type, listener, useCapture) {
    return enummers.view.event.AppEvents.prototype.addEventListener(this.status, type, listener, useCapture);
  };

  StatusView.prototype.createEvent = function(eventName) {
    return enummers.view.event.AppEvents.prototype.createEvent(eventName);
  };

  StatusView.prototype.dispatchEvent = function(event) {
    return enummers.view.event.AppEvents.prototype.dispatchEvent(this.status, event);
  };

  StatusView.prototype.dispatchSoortClicked = function() {
    var logoClickedEvent;
    logoClickedEvent = this.createEvent(enummers.view.event.AppEvents.prototype.STATUS_CLICKED);
    return this.dispatchEvent(logoClickedEvent);
  };

  StatusView.prototype.changeStatus = function(data) {
    return this.viewModel.setStatus(data);
  };

  StatusView.prototype.setStatus = function() {
    this.viewModel = new enummers.model.component.StatusModel();
    this.viewModel.view = this.status;
    return ko.applyBindings(this.viewModel, this.status);
  };

  StatusView.prototype.NAME = "StatusView";

  return StatusView;

})();

puremvc.DefineNamespace('enummers.view.component', function(exports) {
  return exports.StatusView = StatusView;
});

/*
@author Mike Britton, Cliff Hall

@class FaceBookView
@link https://github.com/PureMVC/puremvc-js-demo-enummers.git
*/


FaceBookView = (function() {

  function FaceBookView(event) {
    this.changeMessage = __bind(this.changeMessage, this);

    this.setComments = __bind(this.setComments, this);

    this.changeComments = __bind(this.changeComments, this);
    this.facebook = $("#facebook")[0];
    this.viewModel = {};
    this.facebook.component = this;
    enummers.view.event.AppEvents.prototype.addEventListener(this.facebook, "click", function(event) {
      return this.component.dispatchSoortClicked(event);
    });
  }

  FaceBookView.prototype.ENTER_KEY = 13;

  FaceBookView.prototype.addEventListener = function(type, listener, useCapture) {
    return enummers.view.event.AppEvents.prototype.addEventListener(this.facebook, type, listener, useCapture);
  };

  FaceBookView.prototype.createEvent = function(eventName) {
    return enummers.view.event.AppEvents.prototype.createEvent(eventName);
  };

  FaceBookView.prototype.dispatchEvent = function(event) {
    return enummers.view.event.AppEvents.prototype.dispatchEvent(this.facebook, event);
  };

  FaceBookView.prototype.dispatchSoortClicked = function() {
    var logoClickedEvent;
    logoClickedEvent = this.createEvent(enummers.view.event.AppEvents.prototype.STATUS_CLICKED);
    return this.dispatchEvent(logoClickedEvent);
  };

  FaceBookView.prototype.changeComments = function(data) {
    return this.viewModel.comments(data);
  };

  FaceBookView.prototype.setComments = function(data) {
    this.viewModel = new enummers.model.component.FaceBookModel(data);
    this.viewModel.view = this.facebook;
    return ko.applyBindings(this.viewModel, this.facebook);
  };

  FaceBookView.prototype.changeMessage = function() {
    return this.viewModel.changeMessage();
  };

  FaceBookView.prototype.NAME = "FaceBookView";

  return FaceBookView;

})();

puremvc.DefineNamespace('enummers.view.component', function(exports) {
  return exports.FaceBookView = FaceBookView;
});

/*
@author Mike Britton, Cliff Hall

@class TwitterView
@link https://github.com/PureMVC/puremvc-js-demo-enummers.git
*/


TwitterView = (function() {

  function TwitterView(event) {
    this.changeMessage = __bind(this.changeMessage, this);

    this.setTweets = __bind(this.setTweets, this);

    this.changeTweets = __bind(this.changeTweets, this);
    this.twitter = $("#twitter")[0];
    this.tweets = [];
    this.viewModel = {};
    this.twitter.component = this;
    enummers.view.event.AppEvents.prototype.addEventListener(this.twitter, "click", function(event) {
      return this.component.dispatchSoortClicked(event);
    });
  }

  TwitterView.prototype.ENTER_KEY = 13;

  TwitterView.prototype.addEventListener = function(type, listener, useCapture) {
    return enummers.view.event.AppEvents.prototype.addEventListener(this.twitter, type, listener, useCapture);
  };

  TwitterView.prototype.createEvent = function(eventName) {
    return enummers.view.event.AppEvents.prototype.createEvent(eventName);
  };

  TwitterView.prototype.dispatchEvent = function(event) {
    return enummers.view.event.AppEvents.prototype.dispatchEvent(this.twitter, event);
  };

  TwitterView.prototype.dispatchSoortClicked = function() {
    var logoClickedEvent;
    logoClickedEvent = this.createEvent(enummers.view.event.AppEvents.prototype.STATUS_CLICKED);
    return this.dispatchEvent(logoClickedEvent);
  };

  TwitterView.prototype.changeTweets = function(data) {
    return this.viewModel.tweets(data);
  };

  TwitterView.prototype.setTweets = function(data) {
    this.viewModel = new enummers.model.component.TwitterModel(data);
    this.viewModel.view = this.twitter;
    return ko.applyBindings(this.viewModel, this.twitter);
  };

  TwitterView.prototype.changeMessage = function() {
    return this.viewModel.changeMessage();
  };

  TwitterView.prototype.NAME = "TwitterView";

  return TwitterView;

})();

puremvc.DefineNamespace('enummers.view.component', function(exports) {
  return exports.TwitterView = TwitterView;
});

/*
@author Cliff Hall

@class RoutesMediator
@link https://github.com/PureMVC/puremvc-js-demo-enummers.git
*/


RoutesMediator = (function(_super) {

  __extends(RoutesMediator, _super);

  function RoutesMediator() {
    return RoutesMediator.__super__.constructor.apply(this, arguments);
  }

  RoutesMediator.prototype.router = null;

  RoutesMediator.prototype.onRegister = function() {
    var defaultRoute, options, routes, todoProxy;
    todoProxy = this.facade.retrieveProxy(enummers.model.proxy.TodoProxy.prototype.NAME);
    defaultRoute = this.getRouteForFilter(todoProxy.filter);
    options = {
      resource: this,
      notfound: this.handleFilterAll
    };
    routes = {
      "/": this.handleFilterAll,
      "/active": this.handleFilterActive,
      "/completed": this.handleFilterCompleted
    };
    this.router = new Router(routes).configure(options);
    return this.router.init(defaultRoute);
  };

  RoutesMediator.prototype.getRouteForFilter = function(filter) {
    var route;
    route = void 0;
    switch (filter) {
      case enummers.AppConstants.prototype.FILTER_ALL:
        route = "/";
        break;
      case enummers.AppConstants.prototype.FILTER_ACTIVE:
        route = "/active";
        break;
      case enummers.AppConstants.prototype.FILTER_COMPLETED:
        route = "/completed";
    }
    return route;
  };

  RoutesMediator.prototype.handleFilterAll = function() {
    return this.resource.facade.sendNotification(enummers.AppConstants.prototype.FILTER_TODOS, enummers.AppConstants.prototype.FILTER_ALL);
  };

  RoutesMediator.prototype.handleFilterActive = function() {
    return this.resource.facade.sendNotification(enummers.AppConstants.prototype.FILTER_TODOS, enummers.AppConstants.prototype.FILTER_ACTIVE);
  };

  RoutesMediator.prototype.handleFilterCompleted = function() {
    return this.resource.facade.sendNotification(enummers.AppConstants.prototype.FILTER_TODOS, enummers.AppConstants.prototype.FILTER_COMPLETED);
  };

  RoutesMediator.prototype.NAME = "RoutesMediator";

  return RoutesMediator;

})(puremvc.Mediator);

puremvc.DefineNamespace('enummers.view.mediator', function(exports) {
  return exports.RoutesMediator = RoutesMediator;
});

/*
@author Mike Britton

@class TodoFormMediator
@link https://github.com/PureMVC/puremvc-js-demo-todomvc.git
*/


TodoFormMediator = (function(_super) {

  __extends(TodoFormMediator, _super);

  function TodoFormMediator() {
    return TodoFormMediator.__super__.constructor.apply(this, arguments);
  }

  TodoFormMediator.prototype.listNotificationInterests = function() {
    return [todomvc.AppConstants.prototype.TODOS_FILTERED];
  };

  TodoFormMediator.prototype.onRegister = function() {
    this.setViewComponent(new todomvc.view.component.TodoForm);
    this.viewComponent.addEventListener(todomvc.view.event.AppEvents.prototype.TOGGLE_COMPLETE, this);
    this.viewComponent.addEventListener(todomvc.view.event.AppEvents.prototype.TOGGLE_COMPLETE_ALL, this);
    this.viewComponent.addEventListener(todomvc.view.event.AppEvents.prototype.UPDATE_ITEM, this);
    this.viewComponent.addEventListener(todomvc.view.event.AppEvents.prototype.DELETE_ITEM, this);
    this.viewComponent.addEventListener(todomvc.view.event.AppEvents.prototype.ADD_ITEM, this);
    return this.viewComponent.addEventListener(todomvc.view.event.AppEvents.prototype.CLEAR_COMPLETED, this);
  };

  TodoFormMediator.prototype.handleEvent = function(event) {
    switch (event.type) {
      case todomvc.view.event.AppEvents.prototype.TOGGLE_COMPLETE_ALL:
        return this.sendNotification(todomvc.AppConstants.prototype.TOGGLE_TODO_STATUS, event.doToggleComplete);
      case todomvc.view.event.AppEvents.prototype.DELETE_ITEM:
        return this.sendNotification(todomvc.AppConstants.prototype.DELETE_TODO, event.todoId);
      case todomvc.view.event.AppEvents.prototype.ADD_ITEM:
        return this.sendNotification(todomvc.AppConstants.prototype.ADD_TODO, event.todo);
      case todomvc.view.event.AppEvents.prototype.CLEAR_COMPLETED:
        return this.sendNotification(todomvc.AppConstants.prototype.REMOVE_TODOS_COMPLETED);
      case todomvc.view.event.AppEvents.prototype.TOGGLE_COMPLETE:
      case todomvc.view.event.AppEvents.prototype.UPDATE_ITEM:
        return this.sendNotification(todomvc.AppConstants.prototype.UPDATE_TODO, event.todo);
    }
  };

  TodoFormMediator.prototype.handleNotification = function(note) {
    switch (note.getName()) {
      case todomvc.AppConstants.prototype.TODOS_FILTERED:
        return this.viewComponent.setFilteredTodoList(note.getBody());
    }
  };

  TodoFormMediator.prototype.NAME = "TodoFormMediator";

  return TodoFormMediator;

})(puremvc.Mediator);

puremvc.DefineNamespace('todomvc.view.mediator', function(exports) {
  return exports.TodoFormMediator = TodoFormMediator;
});

/*
@author Mike Britton

@class TodoFormMediator
@link https://github.com/PureMVC/puremvc-js-demo-enummers.git
*/


LogoViewMediator = (function(_super) {

  __extends(LogoViewMediator, _super);

  function LogoViewMediator() {
    return LogoViewMediator.__super__.constructor.apply(this, arguments);
  }

  LogoViewMediator.prototype.listNotificationInterests = function() {
    return [enummers.view.event.AppEvents.prototype.ENUMMERS_LOADED];
  };

  LogoViewMediator.prototype.onRegister = function() {
    this.setViewComponent(new enummers.view.component.LogoView);
    return this.viewComponent.addEventListener(enummers.view.event.AppEvents.prototype.LOGO_CLICKED, this);
  };

  LogoViewMediator.prototype.handleEvent = function(event) {
    switch (event.type) {
      case enummers.view.event.AppEvents.prototype.LOGO_CLICKED:
        return this.sendNotification(enummers.AppConstants.prototype.SHOW_INFO);
    }
  };

  LogoViewMediator.prototype.handleNotification = function(note) {
    switch (note.getName()) {
      case enummers.AppConstants.prototype.ENUMMERS_LOADED:
        return this.viewComponent.enableLogo();
    }
  };

  LogoViewMediator.prototype.NAME = "LogoViewMediator";

  return LogoViewMediator;

})(puremvc.Mediator);

puremvc.DefineNamespace('enummers.view.mediator', function(exports) {
  return exports.LogoViewMediator = LogoViewMediator;
});

/*
@author Mike Britton

@class TodoFormMediator
@link https://github.com/PureMVC/puremvc-js-demo-enummers.git
*/


CategorieenViewMediator = (function(_super) {

  __extends(CategorieenViewMediator, _super);

  function CategorieenViewMediator() {
    return CategorieenViewMediator.__super__.constructor.apply(this, arguments);
  }

  CategorieenViewMediator.prototype.listNotificationInterests = function() {
    return [enummers.AppConstants.prototype.CATEGORIEEN_LOADED, enummers.AppConstants.prototype.ENUMMER_SELECTED, enummers.AppConstants.prototype.ENUMMERS_FILTERED];
  };

  CategorieenViewMediator.prototype.onRegister = function() {
    this.setViewComponent(new enummers.view.component.CategorieenView);
    this.viewComponent.addEventListener(enummers.view.event.AppEvents.prototype.CHECKBOX_CLICKED, this);
    return this.viewComponent.addEventListener(enummers.view.event.AppEvents.prototype.MODEL_UPDATED, this);
  };

  CategorieenViewMediator.prototype.handleEvent = function(event) {
    switch (event.type) {
      case enummers.view.event.AppEvents.prototype.CATEGORIEEN_LOADED:
        return this.sendNotification(enummers.AppConstants.prototype.RELOAD_PAGE);
      case enummers.view.event.AppEvents.prototype.MODEL_UPDATED:
        if ((event.model != null) && event.model === enummers.model.component.CategoryModel.prototype.NAME) {
          return this.sendNotification(enummers.AppConstants.prototype.CATEGORYFILTER_CHANGED, event.item);
        }
    }
  };

  CategorieenViewMediator.prototype.handleNotification = function(note) {
    switch (note.getName()) {
      case enummers.AppConstants.prototype.CATEGORIEEN_LOADED:
        return this.viewComponent.setCategorieen(note.getBody().categorieen);
      case enummers.AppConstants.prototype.ENUMMERS_FILTERED:
        if (note.getBody().by === "categorie") {
          return this.viewComponent.setFilterResult(note.getBody().result);
        } else {
          return this.viewComponent.setFilterResult("");
        }
    }
  };

  CategorieenViewMediator.prototype.NAME = "CategorieenViewMediator";

  return CategorieenViewMediator;

})(puremvc.Mediator);

puremvc.DefineNamespace('enummers.view.mediator', function(exports) {
  return exports.CategorieenViewMediator = CategorieenViewMediator;
});

/*
@author Mike Britton

@class SoortenViewMediator
@link https://github.com/PureMVC/puremvc-js-demo-enummers.git
*/


SoortenViewMediator = (function(_super) {

  __extends(SoortenViewMediator, _super);

  function SoortenViewMediator() {
    return SoortenViewMediator.__super__.constructor.apply(this, arguments);
  }

  SoortenViewMediator.prototype.listNotificationInterests = function() {
    return [enummers.AppConstants.prototype.SOORTEN_LOADED, enummers.AppConstants.prototype.ENUMMERS_FILTERED];
  };

  SoortenViewMediator.prototype.onRegister = function() {
    this.setViewComponent(new enummers.view.component.SoortenView);
    this.viewComponent.addEventListener(enummers.view.event.AppEvents.prototype.CHECKBOX_CLICKED, this);
    return this.viewComponent.addEventListener(enummers.view.event.AppEvents.prototype.MODEL_UPDATED, this);
  };

  SoortenViewMediator.prototype.handleEvent = function(event) {
    switch (event.type) {
      case enummers.view.event.AppEvents.prototype.CHECKBOX_CLICKED:
        return this.sendNotification(enummers.AppConstants.prototype.RELOAD_PAGE);
      case enummers.view.event.AppEvents.prototype.MODEL_UPDATED:
        console.log(event);
        if ((event.model != null) && event.model === enummers.model.component.SoortModel.prototype.NAME) {
          return this.sendNotification(enummers.AppConstants.prototype.SOORTFILTER_CHANGED, event.item);
        }
    }
  };

  SoortenViewMediator.prototype.handleNotification = function(note) {
    switch (note.getName()) {
      case enummers.AppConstants.prototype.SOORTEN_LOADED:
        return this.viewComponent.setSoorten(note.getBody().soorten);
      case enummers.AppConstants.prototype.ENUMMERS_FILTERED:
        if (note.getBody().by === "soort") {
          return this.viewComponent.setFilterResult(note.getBody().result);
        } else {
          return this.viewComponent.setFilterResult("");
        }
    }
  };

  SoortenViewMediator.prototype.NAME = "SoortenViewMediator";

  return SoortenViewMediator;

})(puremvc.Mediator);

puremvc.DefineNamespace('enummers.view.mediator', function(exports) {
  return exports.SoortenViewMediator = SoortenViewMediator;
});

/*
@author Mike Britton

@class ResultViewMediator
@link https://github.com/PureMVC/puremvc-js-demo-enummers.git
*/


ResultViewMediator = (function(_super) {

  __extends(ResultViewMediator, _super);

  function ResultViewMediator() {
    this.handleEvent = __bind(this.handleEvent, this);
    return ResultViewMediator.__super__.constructor.apply(this, arguments);
  }

  ResultViewMediator.prototype.listNotificationInterests = function() {
    return [enummers.AppConstants.prototype.ENUMMERS_LOADED, enummers.AppConstants.prototype.EFFECTEN_LOADED, enummers.AppConstants.prototype.ENUMMERS_EFFECTEN_LOADED, enummers.AppConstants.prototype.SOORTFILTER_CHANGED, enummers.AppConstants.prototype.CATEGORYFILTER_CHANGED, enummers.AppConstants.prototype.SEARCHFILTER_CHANGED];
  };

  ResultViewMediator.prototype.onRegister = function() {
    this.setViewComponent(new enummers.view.component.ResultView);
    this.viewComponent.addEventListener(enummers.view.event.AppEvents.prototype.ENUMMER_CLICKED, this);
    return this.viewComponent.addEventListener(enummers.view.event.AppEvents.prototype.MODEL_UPDATED, this);
  };

  ResultViewMediator.prototype.handleEvent = function(event) {
    switch (event.type) {
      case enummers.view.event.AppEvents.prototype.ENUMMER_CLICKED:
        if (event.item != null) {
          this.sendNotification(enummers.AppConstants.prototype.ENUMMER_SELECTED, event.item);
          return this.viewComponent.updateResult();
        }
        break;
      case enummers.view.event.AppEvents.prototype.MODEL_UPDATED:
        if (!(event.model != null) && event.model === enummers.model.component.ResultModel.prototype.NAME) {
          return this.sendNotification(enummers.AppConstants.prototype.ENUMMER_SELECTED, event.item);
        }
    }
  };

  ResultViewMediator.prototype.handleNotification = function(note) {
    switch (note.getName()) {
      case enummers.AppConstants.prototype.ENUMMERS_LOADED:
        return this.viewComponent.setResult(note.getBody().enummers);
      case enummers.AppConstants.prototype.EFFECTEN_LOADED:
        return this.viewComponent.setEffecten(note.getBody().effecten);
      case enummers.AppConstants.prototype.ENUMMERS_EFFECTEN_LOADED:
        return this.viewComponent.setEnummersEffecten(note.getBody().enummerseffecten);
      case enummers.AppConstants.prototype.SOORTFILTER_CHANGED:
        this.viewComponent.filterBySoort(note.getBody());
        return this.sendNotification(enummers.AppConstants.prototype.ENUMMERS_FILTERED, {
          result: this.viewComponent.viewModel.filteredEnummers().length,
          by: 'soort'
        });
      case enummers.AppConstants.prototype.CATEGORYFILTER_CHANGED:
        this.viewComponent.filterByCategorie(note.getBody());
        return this.sendNotification(enummers.AppConstants.prototype.ENUMMERS_FILTERED, {
          result: this.viewComponent.viewModel.filteredEnummers().length,
          by: 'categorie'
        });
      case enummers.AppConstants.prototype.SEARCHFILTER_CHANGED:
        if (note.getBody() != null) {
          this.viewComponent.filterBySearch(note.getBody());
        }
        return this.sendNotification(enummers.AppConstants.prototype.ENUMMERS_FILTERED, {
          result: this.viewComponent.viewModel.filteredEnummers().length,
          by: 'search'
        });
    }
  };

  ResultViewMediator.prototype.NAME = "ResultViewMediator";

  return ResultViewMediator;

})(puremvc.Mediator);

puremvc.DefineNamespace('enummers.view.mediator', function(exports) {
  return exports.ResultViewMediator = ResultViewMediator;
});

/*
@author Mike Britton

@class TodoFormMediator
@link https://github.com/PureMVC/puremvc-js-demo-enummers.git
*/


SearchViewMediator = (function(_super) {

  __extends(SearchViewMediator, _super);

  function SearchViewMediator() {
    return SearchViewMediator.__super__.constructor.apply(this, arguments);
  }

  SearchViewMediator.prototype.listNotificationInterests = function() {
    return [enummers.AppConstants.prototype.ENUMMERS_LOADED, enummers.AppConstants.prototype.ENUMMERS_FILTERED];
  };

  SearchViewMediator.prototype.onRegister = function() {
    this.setViewComponent(new enummers.view.component.SearchView);
    return this.viewComponent.addEventListener(enummers.view.event.AppEvents.prototype.MODEL_UPDATED, this);
  };

  SearchViewMediator.prototype.handleEvent = function(event) {
    switch (event.type) {
      case enummers.view.event.AppEvents.prototype.MODEL_UPDATED:
        if ((event.model != null) && event.model === enummers.model.component.SearchModel.prototype.NAME) {
          return this.sendNotification(enummers.AppConstants.prototype.SEARCHFILTER_CHANGED, event.item);
        }
    }
  };

  SearchViewMediator.prototype.handleNotification = function(note) {
    switch (note.getName()) {
      case enummers.AppConstants.prototype.ENUMMERS_LOADED:
        return this.viewComponent.setSearch(note.getBody().enummers);
      case enummers.AppConstants.prototype.ENUMMERS_FILTERED:
        if (note.getBody().by === "search") {
          return this.viewComponent.setFilterResult(note.getBody().result);
        } else {
          return this.viewComponent.setFilterResult("");
        }
    }
  };

  SearchViewMediator.prototype.NAME = "SearchViewMediator";

  return SearchViewMediator;

})(puremvc.Mediator);

puremvc.DefineNamespace('enummers.view.mediator', function(exports) {
  return exports.SearchViewMediator = SearchViewMediator;
});

/*
@author Mike Britton

@class StatusViewMediator
@link https://github.com/PureMVC/puremvc-js-demo-enummers.git
*/


StatusViewMediator = (function(_super) {

  __extends(StatusViewMediator, _super);

  function StatusViewMediator() {
    this.handleNotification = __bind(this.handleNotification, this);
    return StatusViewMediator.__super__.constructor.apply(this, arguments);
  }

  StatusViewMediator.prototype.listNotificationInterests = function() {
    return [enummers.AppConstants.prototype.ENUMMERS_LOADED, enummers.AppConstants.prototype.ENUMMER_SELECTED];
  };

  StatusViewMediator.prototype.onRegister = function() {
    this.setViewComponent(new enummers.view.component.StatusView);
    return this.viewComponent.addEventListener(enummers.view.event.AppEvents.prototype.MODEL_UPDATED, this);
  };

  StatusViewMediator.prototype.handleEvent = function(event) {
    switch (event.type) {
      case enummers.view.event.AppEvents.prototype.MODEL_UPDATED:
        if ((event.model != null) && event.model === enummers.model.component.StatusModel.prototype.NAME) {
          return this.sendNotification(enummers.AppConstants.prototype.STATUS_CHANGED, event.item);
        }
    }
  };

  StatusViewMediator.prototype.handleNotification = function(note) {
    switch (note.getName()) {
      case enummers.AppConstants.prototype.ENUMMER_SELECTED:
        return this.viewComponent.changeStatus(note.getBody());
      case enummers.AppConstants.prototype.ENUMMERS_LOADED:
        return this.viewComponent.setStatus();
    }
  };

  StatusViewMediator.prototype.NAME = "StatusViewMediator";

  return StatusViewMediator;

})(puremvc.Mediator);

puremvc.DefineNamespace('enummers.view.mediator', function(exports) {
  return exports.StatusViewMediator = StatusViewMediator;
});

/*
@author Mike Britton

@class FaceBookViewMediator
@link https://github.com/PureMVC/puremvc-js-demo-enummers.git
*/


FaceBookViewMediator = (function(_super) {

  __extends(FaceBookViewMediator, _super);

  function FaceBookViewMediator() {
    return FaceBookViewMediator.__super__.constructor.apply(this, arguments);
  }

  FaceBookViewMediator.prototype.listNotificationInterests = function() {
    return [enummers.AppConstants.prototype.FACEBOOK_COMMENTS_LOADED, enummers.AppConstants.prototype.CHANGE_MESSAGE];
  };

  FaceBookViewMediator.prototype.onRegister = function() {
    this.setViewComponent(new enummers.view.component.FaceBookView);
    return this.viewComponent.addEventListener(enummers.view.event.AppEvents.prototype.MODEL_UPDATED, this);
  };

  FaceBookViewMediator.prototype.handleEvent = function(event) {
    switch (event.type) {
      case enummers.view.event.AppEvents.prototype.MODEL_UPDATED:
        console.log(event);
        if ((event.model != null) && event.model === enummers.model.component.FaceBookModel.prototype.NAME) {
          return this.sendNotification(enummers.AppConstants.prototype.SOORTFILTER_CHANGED, event.item);
        }
    }
  };

  FaceBookViewMediator.prototype.handleNotification = function(note) {
    switch (note.getName()) {
      case enummers.AppConstants.prototype.FACEBOOK_COMMENTS_LOADED:
        return this.viewComponent.setComments(note.getBody().comments);
      case enummers.AppConstants.prototype.CHANGE_MESSAGE:
        if (note.getBody().type === "facebook") {
          return this.viewComponent.changeMessage();
        }
    }
  };

  FaceBookViewMediator.prototype.NAME = "FaceBookViewMediator";

  return FaceBookViewMediator;

})(puremvc.Mediator);

puremvc.DefineNamespace('enummers.view.mediator', function(exports) {
  return exports.FaceBookViewMediator = FaceBookViewMediator;
});

/*
@author Mike Britton

@class TwitterViewMediator
@link https://github.com/PureMVC/puremvc-js-demo-enummers.git
*/


TwitterViewMediator = (function(_super) {

  __extends(TwitterViewMediator, _super);

  function TwitterViewMediator() {
    return TwitterViewMediator.__super__.constructor.apply(this, arguments);
  }

  TwitterViewMediator.prototype.listNotificationInterests = function() {
    return [enummers.AppConstants.prototype.TWITTER_TWEETS_LOADED, enummers.AppConstants.prototype.CHANGE_MESSAGE];
  };

  TwitterViewMediator.prototype.onRegister = function() {
    this.setViewComponent(new enummers.view.component.TwitterView);
    return this.viewComponent.addEventListener(enummers.view.event.AppEvents.prototype.MODEL_UPDATED, this);
  };

  TwitterViewMediator.prototype.handleEvent = function(event) {
    switch (event.type) {
      case enummers.view.event.AppEvents.prototype.MODEL_UPDATED:
        console.log(event);
        if ((event.model != null) && event.model === enummers.model.component.TwitterModel.prototype.NAME) {
          return this.sendNotification(enummers.AppConstants.prototype.SOORTFILTER_CHANGED, event.item);
        }
    }
  };

  TwitterViewMediator.prototype.handleNotification = function(note) {
    switch (note.getName()) {
      case enummers.AppConstants.prototype.TWITTER_TWEETS_LOADED:
        return this.viewComponent.setTweets(note.getBody().tweets);
      case enummers.AppConstants.prototype.CHANGE_MESSAGE:
        console.log(note.getBody().type);
        if (note.getBody().type === "twitter") {
          return this.viewComponent.changeMessage();
        }
    }
  };

  TwitterViewMediator.prototype.NAME = "TwitterViewMediator";

  return TwitterViewMediator;

})(puremvc.Mediator);

puremvc.DefineNamespace('enummers.view.mediator', function(exports) {
  return exports.TwitterViewMediator = TwitterViewMediator;
});

/*
@author Mike Britton

@class StartupCommand
@link https://github.com/PureMVC/puremvc-js-demo-enummers.git
*/


StartupCommand = (function(_super) {

  __extends(StartupCommand, _super);

  function StartupCommand() {
    return StartupCommand.__super__.constructor.apply(this, arguments);
  }

  /*
    Add the sub-commands for this MacroCommand
    @override
  */


  StartupCommand.prototype.initializeMacroCommand = function() {
    this.addSubCommand(enummers.controller.command.PrepModelCommand);
    return this.addSubCommand(enummers.controller.command.PrepViewCommand);
  };

  return StartupCommand;

})(puremvc.MacroCommand);

puremvc.DefineNamespace('enummers.controller.command', function(exports) {
  return exports.StartupCommand = StartupCommand;
});

/*
@author Mike Britton, Cliff Hall

@class PrepControllerCommand
@link https://github.com/PureMVC/puremvc-js-demo-enummers.git
*/


PrepControllerCommand = (function(_super) {

  __extends(PrepControllerCommand, _super);

  function PrepControllerCommand() {
    return PrepControllerCommand.__super__.constructor.apply(this, arguments);
  }

  /*
    Register Commands with the Controller
    @override
  */


  PrepControllerCommand.prototype.execute = function(note) {
    this.facade.registerCommand(enummers.AppConstants.prototype.ADD_TODO, enummers.controller.command.TodoCommand);
    this.facade.registerCommand(enummers.AppConstants.prototype.REMOVE_TODOS_COMPLETED, enummers.controller.command.TodoCommand);
    this.facade.registerCommand(enummers.AppConstants.prototype.DELETE_TODO, enummers.controller.command.TodoCommand);
    this.facade.registerCommand(enummers.AppConstants.prototype.UPDATE_TODO, enummers.controller.command.TodoCommand);
    this.facade.registerCommand(enummers.AppConstants.prototype.TOGGLE_TODO_STATUS, enummers.controller.command.TodoCommand);
    return this.facade.registerCommand(enummers.AppConstants.prototype.FILTER_TODOS, enummers.controller.command.TodoCommand);
  };

  return PrepControllerCommand;

})(puremvc.SimpleCommand);

puremvc.DefineNamespace('enummers.controller.command', function(exports) {
  return exports.PrepControllerCommand = PrepControllerCommand;
});

/*
@author Mike Britton

@class PrepModelCommand
@link https://github.com/PureMVC/puremvc-js-demo-enummers.git
*/


PrepModelCommand = (function(_super) {

  __extends(PrepModelCommand, _super);

  function PrepModelCommand() {
    return PrepModelCommand.__super__.constructor.apply(this, arguments);
  }

  /*
    Register Proxies with the Model
    @override
  */


  PrepModelCommand.prototype.execute = function(note) {
    this.facade.registerProxy(new enummers.model.proxy.EnummersProxy());
    this.facade.registerProxy(new enummers.model.proxy.FaceBookProxy());
    return this.facade.registerProxy(new enummers.model.proxy.TwitterProxy());
  };

  return PrepModelCommand;

})(puremvc.SimpleCommand);

puremvc.DefineNamespace('enummers.controller.command', function(exports) {
  return exports.PrepModelCommand = PrepModelCommand;
});

/*
@author Mike Britton

@class PrepViewCommand
@link https://github.com/PureMVC/puremvc-js-demo-enummers.git
*/


PrepViewCommand = (function(_super) {

  __extends(PrepViewCommand, _super);

  function PrepViewCommand() {
    return PrepViewCommand.__super__.constructor.apply(this, arguments);
  }

  /*
    Register Mediators with the View
    @override
  */


  PrepViewCommand.prototype.execute = function(note) {
    this.facade.registerMediator(new enummers.view.mediator.LogoViewMediator());
    this.facade.registerMediator(new enummers.view.mediator.CategorieenViewMediator());
    this.facade.registerMediator(new enummers.view.mediator.SoortenViewMediator());
    this.facade.registerMediator(new enummers.view.mediator.ResultViewMediator());
    this.facade.registerMediator(new enummers.view.mediator.SearchViewMediator());
    this.facade.registerMediator(new enummers.view.mediator.StatusViewMediator());
    this.facade.registerMediator(new enummers.view.mediator.TwitterViewMediator());
    return this.facade.registerMediator(new enummers.view.mediator.FaceBookViewMediator());
  };

  return PrepViewCommand;

})(puremvc.SimpleCommand);

puremvc.DefineNamespace('enummers.controller.command', function(exports) {
  return exports.PrepViewCommand = PrepViewCommand;
});

/*
@author Mike Britton, Cliff Hall

@class TodoCommand
@link https://github.com/PureMVC/puremvc-js-demo-enummers.git
*/


TodoCommand = (function(_super) {

  __extends(TodoCommand, _super);

  function TodoCommand() {
    return TodoCommand.__super__.constructor.apply(this, arguments);
  }

  /*
    Perform business logic (in this case, based on Notification name)
    @override
  */


  TodoCommand.prototype.execute = function(note) {
    var proxy;
    proxy = this.facade.retrieveProxy(enummers.model.proxy.TodoProxy.prototype.NAME);
    switch (note.getName()) {
      case enummers.AppConstants.prototype.ADD_TODO:
        return proxy.addTodo(note.getBody());
      case enummers.AppConstants.prototype.DELETE_TODO:
        return proxy.deleteTodo(note.getBody());
      case enummers.AppConstants.prototype.UPDATE_TODO:
        return proxy.updateTodo(note.getBody());
      case enummers.AppConstants.prototype.TOGGLE_TODO_STATUS:
        return proxy.toggleCompleteStatus(note.getBody());
      case enummers.AppConstants.prototype.REMOVE_TODOS_COMPLETED:
        return proxy.removeTodosCompleted();
      case enummers.AppConstants.prototype.FILTER_TODOS:
        return proxy.filterTodos(note.getBody());
      default:
        return console.log("TodoCommand received an unsupported Notification");
    }
  };

  return TodoCommand;

})(puremvc.SimpleCommand);

puremvc.DefineNamespace('enummers.controller.command', function(exports) {
  return exports.TodoCommand = TodoCommand;
});

/*
@author Mike Britton, Cliff Hall

@class FaceBookTimerCommand
@link https://github.com/PureMVC/puremvc-js-demo-enummers.git
*/


FaceBookTimerCommand = (function(_super) {

  __extends(FaceBookTimerCommand, _super);

  function FaceBookTimerCommand() {
    this.sendMessage = __bind(this.sendMessage, this);
    return FaceBookTimerCommand.__super__.constructor.apply(this, arguments);
  }

  /*
    Perform business logic (in this case, based on Notification name)
    @override
  */


  FaceBookTimerCommand.prototype.execute = function(note) {
    return this.startFaceBookTimer();
  };

  FaceBookTimerCommand.prototype.startFaceBookTimer = function() {
    var _this = this;
    setInterval((function() {
      return _this.sendMessage;
    })(), 10000);
    return this;
  };

  FaceBookTimerCommand.prototype.sendMessage = function() {
    return this.sendNotification(enummers.AppConstants.prototype.CHANGE_MESSAGE, {
      type: "facebook"
    });
  };

  return FaceBookTimerCommand;

})(puremvc.SimpleCommand);

puremvc.DefineNamespace('enummers.controller.command', function(exports) {
  return exports.FaceBookTimerCommand = FaceBookTimerCommand;
});

/*
@author Mike Britton, Cliff Hall

@class TwitterTimerCommand
@link https://github.com/PureMVC/puremvc-js-demo-enummers.git
*/


TwitterTimerCommand = (function(_super) {

  __extends(TwitterTimerCommand, _super);

  function TwitterTimerCommand() {
    this.sendMessage = __bind(this.sendMessage, this);
    return TwitterTimerCommand.__super__.constructor.apply(this, arguments);
  }

  /*
    Perform business logic (in this case, based on Notification name)
    @override
  */


  TwitterTimerCommand.prototype.execute = function(note) {
    return this.startTwitterTimer();
  };

  TwitterTimerCommand.prototype.startTwitterTimer = function() {
    var _this = this;
    setInterval((function() {
      return _this.sendMessage;
    })(), 15000);
    return this;
  };

  TwitterTimerCommand.prototype.sendMessage = function() {
    return this.sendNotification(enummers.AppConstants.prototype.CHANGE_MESSAGE, {
      type: "twitter"
    });
  };

  return TwitterTimerCommand;

})(puremvc.SimpleCommand);

puremvc.DefineNamespace('enummers.controller.command', function(exports) {
  return exports.TwitterTimerCommand = TwitterTimerCommand;
});

/*
@author Mike Britton

@class enummers.Application
@link https://github.com/PureMVC/puremvc-js-demo-enummers.git
*/


Application = (function() {

  function Application() {
    this.facade.registerCommand(enummers.AppConstants.prototype.STARTUP, enummers.controller.command.StartupCommand);
    this.facade.registerCommand(enummers.AppConstants.prototype.START_FACEBOOK_TIMER, enummers.controller.command.FaceBookTimerCommand);
    this.facade.registerCommand(enummers.AppConstants.prototype.START_TWITTER_TIMER, enummers.controller.command.TwitterTimerCommand);
    this.facade.sendNotification(enummers.AppConstants.prototype.STARTUP);
  }

  Application.prototype.STARTUP = "startup";

  Application.prototype.facade = puremvc.Facade.getInstance();

  return Application;

})();

puremvc.DefineNamespace('enummers', function(exports) {
  return exports.Application = Application;
});
